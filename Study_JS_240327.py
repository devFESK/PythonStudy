# 파이썬 기초
    # 세미콜론 (;) -> 다양한 프로그래밍 언어는 구문이 끝나면 ;을 통해서 끝을 표현해준다
        # 파이썬은 ;을 붙이지 않아도 오류가 발생하지 않는다
        # 한 줄에 여러개의 구문을 사용할 때는 구분을 위해서 ;을 사용
        # 한 줄에 여러개의 구문을 사용해도 결과는 줄바꿈이 된 형태로 나옴
print("Hello"); print("World")

    # 들여쓰기 -> 파이썬에서 들여쓰기는 하나의 문법이다
        # 하나의 구문 안에 속해있음을 표현하는 방법이다
        # 다른 프로그래밍 언어는 중괄호({})를 통해서 하나로 묶어주는 방식이지만, 파이썬은 들여쓰기를 통해서 묶어주는 작업을 진행한다
        # 반복문, 함수제작 같은 곳에서 많이 사용하게 됨
        # 가장 밖에 있는 구문은 들여쓰기를 사용하지 않음 -> 에러 발생
        # 들여쓰기 정도에 따라서 다르게 인식
        # Tab 키를 이용해서 들여쓰기

    # 주석(comment) -> 컴퓨터가 프로그램을 실행했을 때, 실행코드로 판단하지 않게 만드는 부분 -> 지금 #(샵)걸어서 쓰고 있는 이 문장들을 의미함

    # 변수 -> 데이터 정보를 담아두는 공간
        # 코딩이란 다양한 데이터를 가지고 여러가지 상황을 만들어내는 것
        # 데이터를 다루기 위해서는 어떤 공간에 원하는 데이터를 보관했다가 필요할때마다 사용할 수 있어야 함
        # 특정 공간에 데이터를 넣을 때, 그 "공간의 이름을 명명"하여 나중에 컴퓨터에게 해당 공간에 들어있는 데이터를 가져오라고 할 수 있음. 이 때, 그 공간을 변수라고 하고, "공간을 명명하는 것을 변수 지정"이라고 함
        # 변수 규칙
            # 특수문자는 _(underbar)만 가능
            # 숫자로 시작할 수 없음
            # 공백을 포함할 수 없음 -> 공백이 발생하면 컴퓨터는 끊어진 것으로 판단함
            # 가급적 알파벳 사용
            # 내가 사용할 변수의 이름은 알아볼 수 있게 만들어주면 좋음(단, 반복문에서 자주 사용하는 i, j, k 등은 임시로 만들어주는 변수이기 때문에 괜찮음)
            # 키워드를 사용할 수 없음
                # 키워드는 파이썬에서 이미 기능적으로 존재하는 이름들
                # 키워드 확인 방법
"""import keyword
print(keyword.kwlist)"""
                # 결과
                # [‘False’, ‘None’, ‘True’, ‘and’, ‘as’, ‘assert’, ‘async’, ‘await’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]

    # print(출력) -> 프로그램을 실행했을 때 결과를 출력하는 기본적인 함수
        # print라는 기능은 기본적으로 언어에 탑재된 출력 기능이라고 이해하면 좋음
        # 기본 사용 형식은 "print(somthing)" 형식
        # print문 안에 여러가지 내용을 함께 넣어주고 싶으면 ","로 구분함. 이때 기본적으로 ","를 사용하면 스페이스가 포함됨
        # 여러가지 값을 함께 사용할 때, 값 사이에 들어가는 스페이스를 변경하고 싶으면 "sep" 이용
        # print문이 끝나고 난 뒤에는 '\n(줄바꿈)'이 자동으로 붙음 -> "end" 이용해서 "\n" 대신 다른 값을 넣을 수 있음
        # "f-string"을 이용해서 print하는 방식
            # 문자열 안에 다른 것들도 넣는 방식
            # 작성 방법 -> f'원하는 문자열'
            # 변수나 함수의 경우 "{}" 안에서 호출하면 문자열 안에 값이 들어감
# 기본형
print('hello') # hello
print('hello', 'world') # hello world
# sep
print(1, 2, 3, sep = ' ') # 1 2 3
print(1, 2, 3, sep = ', ') # 1, 2, 3
# end
print(1, 2, 3, end = '@\n') # 1, 2, 3@ -> "\n"을 "@"로 변경한 뒤에 생략된 "\n"을 넣어줌으로써 줄바꿈까지 포함시켜줌
# 변수와 함께
name = 'python'
age = 20
print('name is', name, 'and age is', age) # name is python and age is 20